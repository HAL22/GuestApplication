// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/GG_Backend_tech_challenge/src/repository (interfaces: GuestArrivalsRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	model "github.com/GG_Backend_tech_challenge/src/model"
	gomock "github.com/golang/mock/gomock"
)

// MockGuestArrivalsRepository is a mock of GuestArrivalsRepository interface.
type MockGuestArrivalsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGuestArrivalsRepositoryMockRecorder
}

// MockGuestArrivalsRepositoryMockRecorder is the mock recorder for MockGuestArrivalsRepository.
type MockGuestArrivalsRepositoryMockRecorder struct {
	mock *MockGuestArrivalsRepository
}

// NewMockGuestArrivalsRepository creates a new mock instance.
func NewMockGuestArrivalsRepository(ctrl *gomock.Controller) *MockGuestArrivalsRepository {
	mock := &MockGuestArrivalsRepository{ctrl: ctrl}
	mock.recorder = &MockGuestArrivalsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGuestArrivalsRepository) EXPECT() *MockGuestArrivalsRepositoryMockRecorder {
	return m.recorder
}

// AddArrivedGuest mocks base method.
func (m *MockGuestArrivalsRepository) AddArrivedGuest(arg0 model.Guest, arg1 time.Time) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddArrivedGuest", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// AddArrivedGuest indicates an expected call of AddArrivedGuest.
func (mr *MockGuestArrivalsRepositoryMockRecorder) AddArrivedGuest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddArrivedGuest", reflect.TypeOf((*MockGuestArrivalsRepository)(nil).AddArrivedGuest), arg0, arg1)
}

// DeleteArrivedGuestByGuestName mocks base method.
func (m *MockGuestArrivalsRepository) DeleteArrivedGuestByGuestName(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteArrivedGuestByGuestName", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// DeleteArrivedGuestByGuestName indicates an expected call of DeleteArrivedGuestByGuestName.
func (mr *MockGuestArrivalsRepositoryMockRecorder) DeleteArrivedGuestByGuestName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteArrivedGuestByGuestName", reflect.TypeOf((*MockGuestArrivalsRepository)(nil).DeleteArrivedGuestByGuestName), arg0)
}

// GetArrivedGuestByGuestName mocks base method.
func (m *MockGuestArrivalsRepository) GetArrivedGuestByGuestName(arg0 string) (bool, model.GuestArrivals) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArrivedGuestByGuestName", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(model.GuestArrivals)
	return ret0, ret1
}

// GetArrivedGuestByGuestName indicates an expected call of GetArrivedGuestByGuestName.
func (mr *MockGuestArrivalsRepositoryMockRecorder) GetArrivedGuestByGuestName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArrivedGuestByGuestName", reflect.TypeOf((*MockGuestArrivalsRepository)(nil).GetArrivedGuestByGuestName), arg0)
}

// GetArrivedGuests mocks base method.
func (m *MockGuestArrivalsRepository) GetArrivedGuests() (bool, []model.GuestArrivals) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArrivedGuests")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].([]model.GuestArrivals)
	return ret0, ret1
}

// GetArrivedGuests indicates an expected call of GetArrivedGuests.
func (mr *MockGuestArrivalsRepositoryMockRecorder) GetArrivedGuests() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArrivedGuests", reflect.TypeOf((*MockGuestArrivalsRepository)(nil).GetArrivedGuests))
}
